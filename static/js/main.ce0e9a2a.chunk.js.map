{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["Result","f","Row","Col","md","InputGroup","className","size","Text","FormControl","aria-label","readOnly","value","freq","top","div","frac","App","useState","frequency","setFrequency","searching","setSearching","showResultsCount","setShowResultCount","sysFrequency","setSysFrequency","minTop","setMinTop","maxTop","setMaxTop","foundFrequencies","setFoundFrequencies","Container","Form","onSubmit","e","preventDefault","updatedState","undefined","temp","Math","round","abs","push","reverse","submitForm","type","required","onChange","parseInt","currentTarget","placeholder","aria-describedby","Button","variant","length","slice","map","index","onClick","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce0e9a2a.chunk.js","sourcesContent":["import React, {FormEvent, useState} from 'react';\nimport {Button, Col, Container, FloatingLabel, Form, FormControl, InputGroup, Row} from \"react-bootstrap\";\n\ninterface FoundFrequency {\n    freq: number\n    top: number\n    div: number\n    frac: number\n}\n\nfunction Result(f: FoundFrequency) {\n    return <Row>\n\n        <Col md={4}>\n            <InputGroup className=\"mb-3\" size={\"sm\"}>\n                <InputGroup.Text>Frequency:</InputGroup.Text>\n                <FormControl aria-label=\"Top register\" readOnly={true} value={f.freq}/>\n            </InputGroup>\n        </Col>\n        <Col md={8}>\n            <Row>\n                <Col md={6}>\n                    <InputGroup className=\"mb-3\" size={\"sm\"}>\n                        <InputGroup.Text>TOP:</InputGroup.Text>\n                        <FormControl aria-label=\"Top register\" readOnly={true} value={f.top}/>\n                    </InputGroup>\n                </Col>\n                <Col md={6}>\n                    <InputGroup className=\"mb-3\" size={\"sm\"}>\n                        <InputGroup.Text>Div:</InputGroup.Text>\n                        <FormControl aria-label=\"Top register\" readOnly={true} value={f.div}/>\n                        <InputGroup.Text>Frac:</InputGroup.Text>\n                        <FormControl aria-label=\"Top register\" readOnly={true} value={f.frac}/>\n                    </InputGroup>\n                </Col>\n            </Row>\n        </Col>\n\n    </Row>\n}\n\nfunction App() {\n\n    const [frequency, setFrequency] = useState<number>(0);\n    const [searching, setSearching] = useState<boolean>(false)\n\n    const [showResultsCount, setShowResultCount] = useState<number>(5)\n\n    const [sysFrequency, setSysFrequency] = useState<number>(125000000)\n    const [minTop, setMinTop] = useState<number | undefined>(0)\n    const [maxTop, setMaxTop] = useState<number | undefined>(65535)\n\n    const [foundFrequencies, setFoundFrequencies] = useState<FoundFrequency[]>([])\n\n    const calcPeriod = (t: number, d: number, df: number) => (t + 1) * (d + (df / 16))\n\n    const submitForm = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n\n        let freq = 0;\n\n        let found = false;\n        const updatedState = [];\n        setFoundFrequencies([])\n        if (minTop === undefined || maxTop === undefined) {\n            return;\n        }\n\n        setSearching(true);\n\n        for (let top = minTop; top <= maxTop; top++) {\n            for (let div = 1; div < 255; div++) {\n\n                for (let frac = 0; frac < 15; frac++) {\n\n                    const temp = Math.round(sysFrequency / calcPeriod(top, div, frac));\n                    if (Math.abs(temp - frequency) < Math.abs(freq - frequency)) {\n                        freq = temp\n                        updatedState.push({\n                            freq,\n                            top,\n                            div,\n                            frac\n                        })\n                    }\n                }\n            }\n        }\n\n        setFoundFrequencies(updatedState.reverse());\n\n        setSearching(false);\n\n    }\n\n    return (\n        <Container>\n            <h2>Calculate Top, div and Div Frac for specific frequency.</h2>\n            <h3>Add a frequency.</h3>\n            <Row className={\"mt-5\"}>\n                <Col md={8}>\n                    <Form onSubmit={(e) => submitForm(e)}>\n\n                        <InputGroup className=\"mb-3\" size={\"lg\"}>\n                            <InputGroup.Text>Frequency:</InputGroup.Text>\n                            <FormControl\n                                type={\"number\"}\n                                required\n                                onChange={(e) => setFrequency(parseInt(e.currentTarget.value))}\n                                placeholder=\"ex: 12000\"\n                                aria-label=\"Frequency\"\n                                aria-describedby=\"basic-addon2\"\n                            />\n                            <InputGroup.Text>Hz</InputGroup.Text>\n                            <Button\n                                variant=\"outline-secondary\"\n                                type={\"submit\"}>\n                                Calculate\n                            </Button>\n                        </InputGroup>\n                    </Form>\n                    <Row className={\"mt-4\"}>\n                        <Col>\n                            {searching && <h3>Searching...</h3>}\n                            {foundFrequencies.length > 0 && <div>\n                                <h3>Results:</h3>\n                                {foundFrequencies.slice(0, showResultsCount).map((value, index) => <Result\n                                    freq={value.freq} top={value.top}\n                                    div={value.div} frac={value.frac}\n                                    key={index}/>)}\n                            </div>}\n\n                            {foundFrequencies.length > showResultsCount &&\n                            <a onClick={() => setShowResultCount(prevState => prevState + 5)}>Show additional</a>}\n\n                        </Col>\n                    </Row>\n                </Col>\n                <Col/>\n                <Col md={3}>\n\n                    <h4>Config:</h4>\n                    <Row>\n                        <Col md={12}>\n\n                            <h6>Range TOP Register</h6>\n                            <InputGroup className=\"mb-3\" size={\"sm\"}>\n\n                                <FormControl\n                                    onChange={(e) => setMinTop(e.currentTarget.value ? parseInt(e.currentTarget.value) : undefined)}\n                                    placeholder={\"0\"}\n                                    aria-label=\"Min Top\"\n                                    value={minTop ?? ''}\n                                />\n                                <InputGroup.Text>-</InputGroup.Text>\n                                <FormControl\n                                    onChange={(e) => setMaxTop(e.currentTarget.value ? parseInt(e.currentTarget.value) : undefined)}\n                                    placeholder={\"65535\"}\n                                    aria-label=\"System Frequency\"\n                                    value={maxTop ?? ''}\n                                />\n                            </InputGroup>\n                            <h6>System Frequency</h6>\n                            <InputGroup className=\"mb-3\" size={\"sm\"}>\n                                <FormControl\n                                    onChange={(e) => setSysFrequency(parseInt(e.currentTarget.value))}\n                                    placeholder=\"125000000\"\n                                    aria-label=\"System Frequency\"\n                                    value={sysFrequency}\n                                />\n                                <InputGroup.Text>Hz</InputGroup.Text>\n                            </InputGroup>\n\n\n                        </Col>\n                    </Row>\n\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}